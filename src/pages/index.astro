---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Functionally Dysfunctional - Video Player">
  <div class="content-holder">
    <div class="content" id="content">
      <h1>No Distractions</h1>
      <p>
        Keep shouting to watch the video! While clicking the red dot as close as
        possible.
      </p>
      <video
        id="video-container"
        class="video-js"
        preload="auto"
        autoplay
        poster="Coding_With_Lewis.png"
        data-setup="{}"
        controls
      >
        <source src="Coding_With_Lewis.mp4" type="video/mp4" />
        <source src="Coding_With_Lewis.mp4" type="video/webm" />
        <p class="vjs-no-js">
          To view this video please enable JavaScript, and consider upgrading to
          a web browser that
          <a href="https://videojs.com/html5-video-support/" target="_blank"
            >supports HTML5 video</a
          >
        </p>
      </video>
    </div>
    <button class="whisperButton" id="whisperButton">Start Listening</button>
  </div>

  <div class="cursor-point" id="cursor-point"></div>
  <div class="center-point" id="center-point"></div>
</Layout>

<style>
  .content-holder {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    width: auto;
    height: auto;
    margin: 0;
    flex-direction: column;
    color: var(--text-color);
    .content {
      text-align: center;
      transition: font-size 0.3s ease;
      pointer-events: none;

      padding: 1rem;
      video {
        &::-webkit-media-controls-fullscreen-button,
        &::-webkit-media-controls-play-button,
        &::-webkit-media-controls-pausebutton {
          display: none;
        }
      }
    }
    .whisperButton {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      border: none;
      border-radius: 0.6rem;
      background: var(--background-button-color);
      color: var(--text-color);
    }
  }
  .center-point {
    position: absolute;
    width: 1rem;
    height: 1rem;
    border-radius: 1rem;
    background: red;
    z-index: 5;
  }
  .cursor-point {
    visibility: hidden;
    position: absolute;
    width: 1rem;
    height: 1rem;
    border-radius: 1rem;
    background: green;
    z-index: 5;
  }
</style>
<script>
  import $ from "jquery";
  import videojs from "video.js";
  $(function () {
    // Store the theme in localstorage
    const storedTheme = localStorage.getItem("data-theme");
    if (storedTheme) $("html").attr("data-theme", storedTheme);
    else {
    }
    /* Client Preferred Theme Check */
    function detectTheme() {
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        $("html").attr("data-theme", "dark");
        localStorage.setItem("data-theme", "dark");
      } else {
        $("html").attr("data-theme", "light");
        localStorage.setItem("data-theme", "light");
      }
    }
    // Initially run the function
    detectTheme();

    // Listen for theme changes
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", detectTheme);
    new MutationObserver((mutations) => {
      localStorage.setItem(
        "data-theme",
        $("html").attr("data-theme") as string,
      );
    }).observe(document.getElementsByTagName("html").item(0) as HTMLElement, {
      attributes: true,
      attributeFilter: ["data-theme"],
    });
    // Initilise the HTML elements
    const whisperButton = $("#whisperButton");
    const CenterPoint = $("#center-point");
    const CursorPoint = $("#cursor-point");
    // Initilise the Video Player
    const video = videojs("video-container");
    // Get the Audio Context ready
    let audioContext = new window.AudioContext();
    let analyser = audioContext.createAnalyser();
    analyser.fftSize = 256;
    let microphone: MediaStreamAudioSourceNode;
    let isListening = false;
    let isPointACloseToPointB = false;
    // Toggle For the microphone
    whisperButton.on("click", toggleListening);
    // Make sure the video player autoplay is turned off
    video.autoplay(false);
    // Check if the video is manually played by the user.
    video.on("play", (ev: Event) => {
      if (!isListening) video.pause();
    });

    function toggleListening() {
      if (isListening) {
        stopListening();
      } else {
        startListening();
      }
    }

    async function startListening() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          audio: true,
        });
        microphone = audioContext.createMediaStreamSource(stream);
        microphone.connect(analyser);

        isListening = true;
        whisperButton.text("Stop Listening");
        requestAnimationFrame(checkVolume);
      } catch (err) {
        console.error("Error accessing microphone:", err);
        alert(
          "Unable to access the microphone. Please check your browser settings.",
        );
      }
    }

    function stopListening() {
      if (microphone) {
        microphone.disconnect();
      }
      if (audioContext) {
        audioContext.close();
      }
      isListening = false;
      whisperButton.text("Start Listening");
    }
    const pcmData = new Float32Array(analyser.fftSize);
    function checkVolume() {
      if (!isListening) return video.pause();
      if (!isPointACloseToPointB) return video.pause();
      const dataArray = new Uint8Array(analyser.frequencyBinCount);
      analyser.getByteFrequencyData(dataArray);

      analyser.getFloatTimeDomainData(pcmData);
      let sumSquares = 0.0;
      for (const amplitude of pcmData) {
        sumSquares += amplitude * amplitude;
      }
      // Just multiplying to get a roundedoff number
      const volume = Math.floor(Math.sqrt(sumSquares / pcmData.length) * 1000);
      // Range between 20 and 500 to make life miserably
      if (volume >= 20 && volume <= 500) {
        video.play();
      } else {
        video.pause();
      }
      requestAnimationFrame(checkVolume);
    }

    let x = $(this)?.width() as number;
    let y = $(this)?.height() as number;
    // Move the red dot around like a jackass
    const movePosition = () => {
      isPointACloseToPointB = true;
      CenterPoint.offset({
        left: Math.floor(Math.random() * (x / 2)),
        top: Math.floor(Math.random() * (y / 2)),
      });
      CenterPoint.css("visibility", "hidden");
      setTimeout(() => {
        CenterPoint.css("visibility", "visible");
        isPointACloseToPointB = false;
      }, 2000);
    };
    movePosition();
    $(this).on("click", (ev) => {
      CursorPoint.offset({ left: ev.pageX, top: ev.pageY });
      CursorPoint.css("visibility", "visible");
      CenterPoint.css("visibility", "visible");
      const { left: CursorPointX, top: CursorPointY } = CursorPoint.position();
      const { left: CenterPointX, top: CenterPointY } = CenterPoint.position();
      if (
        Math.sqrt(
          Math.pow(CenterPointX - CursorPointX, 2) +
            Math.pow(CenterPointY - CursorPointY, 2),
        ) <= 50
      )
        movePosition();

      requestAnimationFrame(checkVolume);
    });
  });
</script>
